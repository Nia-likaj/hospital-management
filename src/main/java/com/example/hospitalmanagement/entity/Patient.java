package com.example.hospitalmanagement.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDate;
import java.util.List;

/**
 * This class represents the Patient entity, which is used to store information about patients in the hospital.
 * It includes fields for the patient's ID, name, last name, birth date, admissions, clinical records, and the department they belong to.
 */
@Getter // Lombok annotation to automatically generate getter methods for all fields.
@Setter // Lombok annotation to automatically generate setter methods for all fields.
@Entity // Marks this class as a JPA entity, meaning it will be mapped to a database table.
public class Patient {

    /**
     * The unique identifier for the patient.
     * This field is automatically generated by the database using an identity column.
     */
    @Id // Marks this field as the primary key of the entity.
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Specifies that the primary key is auto-incremented by the database.
    private Long id;

    /**
     * The first name of the patient.
     * This field is mandatory.
     */
    @Column(nullable = false) // Specifies that this field cannot be null.
    private String name;

    /**
     * The last name of the patient.
     * This field is mandatory.
     */
    @Column(nullable = false) // Specifies that this field cannot be null.
    private String lastName;

    /**
     * The birth date of the patient.
     * This field is mandatory.
     */
    @Column(nullable = false) // Specifies that this field cannot be null.
    private LocalDate birthDate;

    /**
     * The list of admissions associated with this patient.
     * This field establishes a one-to-many relationship with the AdmissionState entity.
     */
    @OneToMany(mappedBy = "patient", cascade = CascadeType.ALL, orphanRemoval = true) // Specifies a one-to-many relationship with the AdmissionState entity.
    private List<AdmissionState> admissions;

    /**
     * The list of clinical records associated with this patient.
     * This field establishes a one-to-many relationship with the ClinicalData entity.
     */
    @OneToMany(mappedBy = "patient", cascade = CascadeType.ALL, orphanRemoval = true) // Specifies a one-to-many relationship with the ClinicalData entity.
    private List<ClinicalData> clinicalRecords;

    /**
     * The department to which the patient belongs.
     * This field establishes a many-to-one relationship with the Department entity.
     */
    @ManyToOne // Specifies a many-to-one relationship with the Department entity.
    @JoinColumn(name = "department_id", nullable = false) // Specifies the foreign key column in the database and ensures it cannot be null.
    private Department department;

    /**
     * Default constructor.
     * Required for JPA to create instances of this class during data retrieval.
     */
    public Patient() {}

    /**
     * Constructor with required fields.
     * Useful for creating instances of this class with predefined values.
     *
     * @param name The first name of the patient.
     * @param lastName The last name of the patient.
     * @param birthDate The birth date of the patient.
     * @param department The department to which the patient belongs.
     */
    public Patient(String name, String lastName, LocalDate birthDate, Department department) {
        this.name = name;
        this.lastName = lastName;
        this.birthDate = birthDate;
        this.department = department;
    }
}
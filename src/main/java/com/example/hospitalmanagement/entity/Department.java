package com.example.hospitalmanagement.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.util.List;

/**
 * This class represents the Department entity, which is used to store information about hospital departments.
 * It includes a unique identifier, a department code, a department name, and a list of patients associated with the department.
 */
@Getter // Lombok annotation to automatically generate getter methods for all fields.
@Setter // Lombok annotation to automatically generate setter methods for all fields.
@Entity // Marks this class as a JPA entity, meaning it will be mapped to a database table.
public class Department {

    /**
     * The unique identifier for the department.
     * This field is automatically generated by the database using an identity column.
     */
    @Id // Marks this field as the primary key of the entity.
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Specifies that the primary key is auto-incremented by the database.
    private Long id;

    /**
     * The code representing the department (e.g., "HR" for Human Resources).
     * This field is mandatory and must be unique across all departments.
     */
    @Column(nullable = false, unique = true) // Specifies that this field cannot be null and must be unique in the database.
    private String code;

    /**
     * The name of the department (e.g., "Cardiology").
     * This field is mandatory.
     */
    @Column(nullable = false) // Specifies that this field cannot be null.
    private String name;

    /**
     * The list of patients associated with this department.
     * This field establishes a one-to-many relationship with the Patient entity.
     */
    @OneToMany(mappedBy = "department", cascade = CascadeType.ALL, orphanRemoval = true) // Specifies a one-to-many relationship with the Patient entity.
    private List<Patient> patients;

    /**
     * Default constructor.
     * Required for JPA to create instances of this class during data retrieval.
     */
    public Department() {}

    /**
     * Constructor with required fields.
     * Useful for creating instances of this class with predefined values.
     *
     * @param code The code representing the department.
     * @param name The name of the department.
     */
    public Department(String code, String name) {
        this.code = code;
        this.name = name;
    }
}